{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Trie": {
		"prefix": "tempTrie",
		"body": [
			"struct Trie {",
			"  Trie *child[26];",
			"  int numStop;",
			"  Trie() {",
			"    for (int i = 0; i < 26; i++) child[i] = NULL;",
			"    numStop = 0;",
			"  }",
			"} *root = new Trie();",
			"",
			"void Insert(const string &s) {",
			"  Trie *cur = root;",
			"  for (int i = 0; i < (int)s.size(); i++) {",
			"    int x = s[i] - 'a';",
			"    if (cur->child[x] == NULL)",
			"      cur->child[x] = new Trie();",
			"    cur = cur->child[x];",
			"  }",
			"  cur->numStop++;",
			"}",
			"",
			"bool Search(const string &s) {",
			"  Trie *cur = root;",
			"  for (int i = 0; i < (int)s.size(); i++) {",
			"    int x = s[i] - 'a';",
			"    if (cur->child[x] == NULL) return 0;",
			"    cur = cur->child[x];",
			"  }",
			"  return 1;",
			"}"
		],
		"description": ""
	}
}